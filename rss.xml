<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Luis Ball]]></title><description><![CDATA[Luis H. Ball Jr: Dad, Software Engineer, Pittsburgh Sports Fan]]></description><link>https://gatsby-starter-blog-demo.netlify.app</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 03 Jul 2020 17:17:36 GMT</lastBuildDate><item><title><![CDATA[Styling selected text with CSS]]></title><description><![CDATA[Some sites, like, again, Medium, style their selected text with their own background colors. It’s quite simple to do, and yet can really…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/styling-document-selection-part-2/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/styling-document-selection-part-2/</guid><pubDate>Fri, 03 Jul 2020 13:42:55 GMT</pubDate><content:encoded>&lt;p&gt;Some sites, like, again, Medium, style their selected text with their own background colors. It’s quite simple to do, and yet can really help set one’s page apart. The trick is to use the &lt;code class=&quot;language-text&quot;&gt;::selected&lt;/code&gt; pseudo &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/::selection&quot;&gt;selector&lt;/a&gt;. For example if we wanted to give our selected text the classic ‘highlighter’ yellow look, we could do something like the example bellow.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;::selection&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; yellow&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There’s a handful of other properties that we can play with as well, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;background-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;cursor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;caret-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;outline&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;text-decoration and its associated properties&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;text-emphasis-color&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;text-shadow&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This great &lt;a href=&quot;https://css-tricks.com/almanac/selectors/s/selection/&quot;&gt;example&lt;/a&gt; by Chris Coyer illustrates this well.&lt;/p&gt;
&lt;iframe height=&quot;470&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;::selection tests&quot; src=&quot;https://codepen.io/chriscoyier/embed/preview/qNLymj?height=470&amp;theme-id=dark&amp;default-tab=css,result&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
  See the Pen &lt;a href=&apos;https://codepen.io/chriscoyier/pen/qNLymj&apos;&gt;::selection tests&lt;/a&gt; by Chris Coyier 
  (&lt;a href=&apos;https://codepen.io/chriscoyier&apos;&gt;@chriscoyier&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;p&gt;For my personal site, I chose just to style the selection a different shade of blue from the default. It’s subtle enough that most people wouldn’t notice, but I find it soothing to have the highlighted text background colors be consistent across all browsers.&lt;/p&gt;
&lt;p&gt;The one caveat to the &lt;code class=&quot;language-text&quot;&gt;::selection&lt;/code&gt; pseudo selector is that, on mobile, it’s &lt;a href=&quot;https://caniuse.com/#feat=css-selection&quot;&gt;support&lt;/a&gt; is haphazard at best. You’ll notice it most on iOS’ Safari. &lt;/p&gt;
&lt;h2&gt;Up next&lt;/h2&gt;
&lt;p&gt;In the next post in this series, we’ll discuss how to combine the &lt;a href=&quot;https://luisball.com/styling-document-selection/&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;useSelect&lt;/code&gt;&lt;/a&gt; hook with these custom styles to create a share-tooltip that works on desktop and mobile.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Browser Selection API tricks]]></title><description><![CDATA[I’ve always wanted to implement something like Medium’s highlighting and sharing tooltip. But I was surprised just how much work it takes to…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/styling-document-selection/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/styling-document-selection/</guid><pubDate>Thu, 02 Jul 2020 16:24:14 GMT</pubDate><content:encoded>&lt;p&gt;I’ve always wanted to implement something like &lt;strong&gt;Medium’s&lt;/strong&gt; highlighting and sharing tooltip. But I was surprised just how much work it takes to do it right, especially in SSR React applications. So in the next few blog posts I’ll be detailing some tips and tricks I used to create a medium-like sharing tooltip.&lt;/p&gt;
&lt;h2&gt;Getting the selected text from the document&lt;/h2&gt;
&lt;p&gt;First off, you’re going to want an easy way to reference the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Selection&quot;&gt;Selection object&lt;/a&gt;. This is the object that stores “the range of text selected by the user or the current position of the caret.” Specifically, we’re going to want &lt;code class=&quot;language-text&quot;&gt;Selection.toString()&lt;/code&gt; since that’s what returns the selected text we’d like to share with our peeps. Since we’re working with an SSR React application however, the &lt;code class=&quot;language-text&quot;&gt;document&lt;/code&gt; isn’t going to be available just anywhere. Moreover, we probably want keep this separate from the components that use the selected text. Which is to say, what we want is a Hook.&lt;/p&gt;
&lt;h3&gt;useSelection Hook&lt;/h3&gt;
&lt;p&gt;So let’s make a React hook that returns selected text and Selection object. First we’re going to want to import &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; from React. We are making a hook after all. But note that in SSR React apps, the &lt;code class=&quot;language-text&quot;&gt;window&lt;/code&gt; and &lt;code class=&quot;language-text&quot;&gt;document&lt;/code&gt; are only accessible within specific react-lifecycle methods. We’re going to access them in the &lt;code class=&quot;language-text&quot;&gt;useEffect&lt;/code&gt; hook and store the values we draw from them using the &lt;code class=&quot;language-text&quot;&gt;useState&lt;/code&gt; hook. In this case, that means storing our selected text:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;selected&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setSelected&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; selObj &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSelection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setSelected&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;selObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now if all we wanted was a one time snapshot of the &lt;code class=&quot;language-text&quot;&gt;Selection&lt;/code&gt; object, we’d be set. But what we really want is the &lt;em&gt;current&lt;/em&gt; value of the &lt;code class=&quot;language-text&quot;&gt;Selection&lt;/code&gt;. In other words, whenever the selection changes, our &lt;code class=&quot;language-text&quot;&gt;Selection&lt;/code&gt; object should have changed as well. To get this behavior, we’re going to use the &lt;code class=&quot;language-text&quot;&gt;onselectionchange&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Document/selectionchange_event&quot;&gt;event listener&lt;/a&gt;. This way, we retrieve the &lt;code class=&quot;language-text&quot;&gt;selection.toString()&lt;/code&gt; and set it as &lt;code class=&quot;language-text&quot;&gt;selected&lt;/code&gt; using the &lt;code class=&quot;language-text&quot;&gt;setSelected()&lt;/code&gt; state hook.&lt;/p&gt;
&lt;p&gt;Our final product for a &lt;code class=&quot;language-text&quot;&gt;useSelection&lt;/code&gt; hook then looks something like this:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; useState&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; useEffect &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;react&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;useSelection&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;selected&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setSelected&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token comment&quot;&gt;// callback function that updates state with current selection&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;handleSelectionChange&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; selection&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// if browser supports selection API &lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getSelection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            selection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getSelection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; selection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;selection&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            selection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;selection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createRange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; selection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// update state with selected text and Selection object&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;setSelected&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; selection &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; isSubscribed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;// whenever selection on page changes, call handleSelectionChange callback&lt;/span&gt;
        document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;onselectionchange&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; isSubscribed &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handleSelectionChange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;token comment&quot;&gt;// &apos;unsubscribe&apos; from event listener on component dismount&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; isSubscribed &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; selected&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have the hook, we can use it in any component to get the &lt;code class=&quot;language-text&quot;&gt;Selection&lt;/code&gt; object and its string value.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; selected &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;useSelection&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// =&gt; { selection: Selection, text: selected text str }&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Up next&lt;/h2&gt;
&lt;p&gt;In the next post in the series, I’ll detail how we can use this hook to share the selected text using a share-tooltip.&lt;/p&gt;
&lt;!-- TODO: add this to final blog post --&gt;
&lt;!-- It&apos;s easy to fall in love with [Medium&apos;s](www.medium.com) reading experience. They do some incredibly smart text formatting and styling that makes the article easy to read at any screen resolution and size. It&apos;s a shame most people don&apos;t realize the amount of effort that goes into it. Especially since to really get a feel for it you&apos;d have to open up the inspector and take a peek at plethora of custom CSS being used on sometimes even the character level. --&gt;</content:encoded></item><item><title><![CDATA[Bulk un-liking tweets, why it's so hard, and how to do it]]></title><description><![CDATA[In the current intellectual climate, where good-faith discussion over seemingly innocent topics can get impact one’s livelihood, many people…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/why-bulk-twitter-unlike-is-so-hard/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/why-bulk-twitter-unlike-is-so-hard/</guid><pubDate>Sat, 13 Jun 2020 21:24:32 GMT</pubDate><content:encoded>&lt;p&gt;In the current intellectual climate, where good-faith discussion over seemingly innocent topics can get impact one’s livelihood, many people have turned to culling their social media histories. I’ve made a regular practice of this since the Snowden &lt;a href=&quot;https://www.theguardian.com/world/interactive/2013/nov/01/snowden-nsa-files-surveillance-revelations-decoded&quot;&gt;revelations&lt;/a&gt;. But it was &lt;a href=&quot;https://nymag.com/author/andrew-sullivan/&quot;&gt;Andrew Sullivan’s&lt;/a&gt; latest essay that really pushed me to find a way to do this in an efficient, automated fashion.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“We have co-workers eager to weaponize their ideology to purge the workforce. We have employers demanding our attendance at seminars and workshops to teach this ideology. We have journalists (of all people) poring through other writers’ work or records to get them in trouble, demoted, or fired. We have faculty members at colleges signing petitions to rid their departments of those few left not fully onboard. We have human-resources departments that have adopted this ideology whole and are imposing it as a condition for employment. And, critically, we have a Twitter mob to hound people into submission.”&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://nymag.com/intelligencer/2020/06/andrew-sullivan-is-there-still-room-for-debate.html&quot;&gt;Is There Still Room for Debate?&lt;/a&gt; | Andrew Sullivan&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Twitter makes it &lt;a href=&quot;https://www.theverge.com/2018/2/8/16991396/how-to-delete-twitter-history-tweetdelete&quot;&gt;notoriously&lt;/a&gt; difficult to mass-delete old tweets, media, and likes. Unless you’re inclined to hand over control over your account and all it’s history indefinitely to a third-party, there’s really no good way to do this. Which is exactly why I made one.&lt;/p&gt;
&lt;h2&gt;Bulk-un-liking tweets&lt;/h2&gt;
&lt;p&gt;I made &lt;a href=&quot;https://github.com/luqven/likeBuddy&quot;&gt;likeBuddy&lt;/a&gt;, a simple script, in an afternoon out of frustration with how long it was taking me to remove likes from an old account. So lots of room for improvement here, please don’t judge me too harshly.&lt;/p&gt;
&lt;p&gt;The script adds a &lt;code class=&quot;language-text&quot;&gt;likeBuddy.unlike()&lt;/code&gt; function to the browser window. The function accepts one argument, an integer, indicating how many tweets you want to ‘un-like’. You can see some of the sample console output bellow.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;console&quot;&gt;&lt;pre class=&quot;language-console&quot;&gt;&lt;code class=&quot;language-console&quot;&gt;searching for more tweets 🕵️ ...
working... 🔨
4 likes removed 🗑️
--
LikeBuddy deleted likes in: 478ms - timer ended
It found 4 tweets to unlike 💔&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;How it works&lt;/h3&gt;
&lt;p&gt;The script finds the tweets in the viewport with the ‘liked’ attribute. As of this writing, Twitter gives tweets that can be un-liked &lt;code class=&quot;language-text&quot;&gt;div[data-testid=&amp;quot;unlike&amp;quot;]&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; likedTweetAttribute &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;div[data-testid=&quot;unlike&quot;]&apos;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; foundTweets &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelectorAll&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;likedTweetAttribute&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;LikeBuddy then simulates a click on each of those tweet’s hearts.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;unlike&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;tweet&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;working... 🔨&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    unliked &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; unliked &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;updateProgress&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    tweet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Until it finally repeats the process as many times as necessary to match the input target number of tweets&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// scroll to begin loading next batch of tweets&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;scrollToBottom&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;/** 
 * an interval is established here to avoid:
 * a) being mistaken for a bot, and
 * b) allow for lazy-lading assets to finish rendering
 */&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; counter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; scrollBuffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    counter&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;counter &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;findAndRemove&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;scrollBuffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Some closing thoughts&lt;/h2&gt;
&lt;p&gt;It’d be nice if I had the time to build some sort of GUI instead of having the user interact via the console. Not very elegant. Also I’m a little worried about getting tagged as a bot or somehow getting account feature’s limited as a result of bulk-un-liking. But for the immediate future, this likeBuddy script is an easy to bulk-un-like tweets without having to hand over your twitter data or credentials.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Why browser's "auto-fill" features suck and how to fix them]]></title><description><![CDATA[It’s well known that browser’s autofill, or autocomplete, implementations vary. A lot. Not only between browsers but between the desktop and…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/autofill-sucks/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/autofill-sucks/</guid><pubDate>Wed, 10 Jun 2020 22:36:41 GMT</pubDate><content:encoded>&lt;p&gt;It’s well known that browser’s autofill, or autocomplete, implementations vary. A lot. Not only between browsers but between the desktop and mobile versions of browsers. So why do are we still in the situation where some developers still don’t &lt;a href=&quot;https://css-tricks.com/snippets/css/change-autocomplete-styles-webkit-browsers/&quot;&gt;control&lt;/a&gt; for this behavior?&lt;/p&gt;
&lt;p&gt;Maybe they’re just not aware it’s a widespread issue. Maybe most web developer’s are so privacy concerned they’ve disabled the feature. And I suppose that’s excusable, since I have no idea what percentage of browser users actually interact with the auto fill feature. But I want to at least draw attention to this problem.&lt;/p&gt;
&lt;h2&gt;Auto fill isn’t contextually aware&lt;/h2&gt;
&lt;p&gt;Look at the example bellow.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/00g9HI9.png&quot; alt=&quot;auto-filled-form-obscuring-dropdown-options&quot;&gt;&lt;/p&gt;
&lt;iframe height=&quot;300&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;Problem with client autofill and autocomplete&quot; src=&quot;https://codepen.io/luqven/embed/preview/ExPPdGJ?height=300&amp;theme-id=36302&amp;default-tab=js,result&amp;editable=true&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
  See the Pen &lt;a href=&apos;https://codepen.io/luqven/pen/ExPPdGJ&apos;&gt;Problem with client autofill and autocomplete&lt;/a&gt; by Luis Ball
  (&lt;a href=&apos;https://codepen.io/luqven&apos;&gt;@luqven&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;p&gt;I run into this issue dozens of times a day, where the autofill form is obscuring the dropdown options of the form it’s trying to autofill. Try it out above, you’ll see how frustrating it is - &lt;em&gt;note: on some browsers you need to double click to bring up the auto-fill&lt;/em&gt;.&lt;/p&gt;
&lt;!-- CodePen Embed goes here --&gt;
&lt;p&gt;Now obviously not everyone implements dropdowns in this way. And we do often use the same information for things like address field, hence why autofill exists. But, at least in my experience, I find the feature obstructs as much as it helps.&lt;/p&gt;
&lt;h2&gt;How we can fix this&lt;/h2&gt;
&lt;p&gt;Thankfully, there is a way to &lt;a href=&quot;&quot;&gt;style&lt;/a&gt; the built-in auto fill functionality somewhat. But the “fix” I’d like to see is for browser developers to add a dismiss feature. And I know the &lt;code class=&quot;language-text&quot;&gt;Esc&lt;/code&gt; key works in some, but frankly that’s neither guaranteed nor foolproof, given in some contexts that can also dismiss a modal unintentionally. &lt;/p&gt;
&lt;p&gt;We’d all be frankly better off if they’d just add a small &lt;code class=&quot;language-text&quot;&gt;dismiss&lt;/code&gt; or &lt;code class=&quot;language-text&quot;&gt;X&lt;/code&gt; to the autofill modal. For now, I’ll have to make do with just disabling the darned thing.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[The problem with snack bars for managing notifications]]></title><description><![CDATA[Snack bars, also known as toasts, are popular. But they’re almost always absolutely positioned, obscuring content in unexpected and annoying…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/the-problem-with-snack-bars/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/the-problem-with-snack-bars/</guid><pubDate>Tue, 09 Jun 2020 19:07:26 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://material-ui.com/components/snackbars/&quot;&gt;Snack bars&lt;/a&gt;, also known as toasts, are popular. But they’re almost always absolutely positioned, obscuring content in unexpected and annoying ways.&lt;/p&gt;
&lt;p&gt;Take LinkedIn. It’s snackbar does not have a timeout. Moreover, they stack and unlimited number of times. This Makes for a very annoying job application process on the site.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/cNo1duH.png&quot; alt=&quot;linked-in-snackbar&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can do better, and some already do.&lt;/p&gt;
&lt;p&gt;GitHub’s notifications view is an excellent example. They make it easy to know when there’s something new, and easy to manage old notifications. &lt;/p&gt;
&lt;!-- ![github-notifications-bell](https://i.imgur.com/2DVxA7I.png) --&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/44dtJXj.png&quot; alt=&quot;github-notifications-manager&quot;&gt;&lt;/p&gt;
&lt;p&gt;So use snack bars sparingly, if you must use them at all. They can easily overwhelm your users and cause unintended frustration.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[How to publish a Gatsby site to GitHub Pages]]></title><description><![CDATA[I was recently updating my personal site whe all of a sudden I realized I’d managed to publish the repo’s  as the homepage. After a brief…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/gatsby-gh-pages/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/gatsby-gh-pages/</guid><pubDate>Tue, 09 Jun 2020 07:00:25 GMT</pubDate><content:encoded>&lt;p&gt;I was recently updating my personal site whe all of a sudden I realized I’d managed to publish the repo’s &lt;code class=&quot;language-text&quot;&gt;README.md&lt;/code&gt; as the homepage. After a brief moment of panic, I remembered I’d recently transitioned over to using &lt;a href=&quot;https://github.com/tschaub/gh-pages&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gh-pages&lt;/code&gt;&lt;/a&gt; package to manage my deploys.&lt;/p&gt;
&lt;p&gt;As it turns out, the suggested &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; deploy script in that package’s readme&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;deploy&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby build &amp;amp;&amp;amp; gh-pages -d public -b master&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;doesn’t account for people to publish GitHub pages to custom domains. Therefore, every deploy would erase the &lt;code class=&quot;language-text&quot;&gt;CNAME&lt;/code&gt; file in the root directory since this is not automatically created by the &lt;code class=&quot;language-text&quot;&gt;gastby build&lt;/code&gt; script.&lt;/p&gt;
&lt;p&gt;Solution? Just adding &lt;code class=&quot;language-text&quot;&gt;cp CNAME public&lt;/code&gt; to the &lt;code class=&quot;language-text&quot;&gt;deploy command&lt;/code&gt; ensures we don’t delete the existing &lt;code class=&quot;language-text&quot;&gt;CNAME&lt;/code&gt; file on deploy. So our &lt;code class=&quot;language-text&quot;&gt;package.json&lt;/code&gt; scripts would end up looking something like:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&quot;deploy&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;gatsby build &amp;amp;&amp;amp; cp CNAME public &amp;amp;&amp;amp; gh-pages -d public -b master&quot;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[How to make a cross-browser, blurred-glass menu bar]]></title><description><![CDATA[The goal is to recreate the apple.com menubar. They do some fancy blur effects that are not supported in FireFox at the moment. safari-vs…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/corss-browser-glass-navbar/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/corss-browser-glass-navbar/</guid><pubDate>Mon, 08 Jun 2020 07:00:25 GMT</pubDate><content:encoded>&lt;p&gt;The goal is to recreate the &lt;a href=&quot;www.apple.com&quot;&gt;apple.com&lt;/a&gt; menubar. They do some fancy blur effects that are not supported in FireFox at the moment.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/f1bFaBu.png&quot; alt=&quot;safari-vs-firefox-blur-glass-menubar&quot;&gt;&lt;/p&gt;
&lt;p&gt;As you can see in the image above, non-WebKit browsers like Firefox don’t support the &lt;code class=&quot;language-text&quot;&gt;backdrop-filter&lt;/code&gt; CSS property as of right now. In order to achieve something like the cross-browser compatible example bellow, we therefore have to do some CSS and Js tricker.&lt;/p&gt;
&lt;h2&gt;Cross-browser compatible example&lt;/h2&gt;
&lt;iframe height=&quot;399&quot; style=&quot;width: 100%;&quot; scrolling=&quot;no&quot; title=&quot;YzwwzWV&quot; src=&quot;https://codepen.io/luqven/embed/YzwwzWV?height=399&amp;theme-id=dark&amp;default-tab=css,result&amp;editable=true&quot; frameborder=&quot;no&quot; allowtransparency=&quot;true&quot; allowfullscreen=&quot;true&quot;&gt;
  See the Pen &lt;a href=&apos;https://codepen.io/luqven/pen/YzwwzWV&apos;&gt;YzwwzWV&lt;/a&gt; by Luis Ball
  (&lt;a href=&apos;https://codepen.io/luqven&apos;&gt;@luqven&lt;/a&gt;) on &lt;a href=&apos;https://codepen.io&apos;&gt;CodePen&lt;/a&gt;.
&lt;/iframe&gt;
&lt;h2&gt;Blurred-glass menu bar in WebKit Browsers&lt;/h2&gt;
&lt;p&gt;Achieving this effect in a webkit browser is fairly simple. We just need to add a css class to the navigation bar with a &lt;code class=&quot;language-text&quot;&gt;backdrop-filter&lt;/code&gt; property:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;    &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;backdrop-filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;12px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token selector&quot;&gt;.blurred&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;backdrop-filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saturate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;180 %&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;13px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;token selector&quot;&gt;.nav&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #5d5d5dc2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Where it gets tricky is implementing the same effect on the menu bar in browsers without support for &lt;code class=&quot;language-text&quot;&gt;backdrop-filter&lt;/code&gt;. So to re-create the translucency, you have to get a little creative.&lt;/p&gt;
&lt;h2&gt;Blur effects in non-webkit browsers&lt;/h2&gt;
&lt;p&gt;First off, creating a &lt;code class=&quot;language-text&quot;&gt;blurred-glass&lt;/code&gt; filter in FireFox requires us to use a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;svg&amp;gt;&lt;/code&gt; element trick. Essentially, a semi-transparent &lt;code class=&quot;language-text&quot;&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; with a &lt;code class=&quot;language-text&quot;&gt;&amp;lt;feGaussianBlur /&amp;gt;&lt;/code&gt; property is placed somewhere on the page.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;jsx&quot;&gt;&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// svg element with blur filter applied&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;svg&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;svg-image-blur&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;filter&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;blur-effect&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;feGaussianBlur&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;stdDeviation&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;10&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;svg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, its id gets referenced in the CSS as a &lt;code class=&quot;language-text&quot;&gt;filter&lt;/code&gt; for the element that’s being blurred.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;/* css property referencing that element as the filter */&lt;/span&gt;
    &lt;span class=&quot;token selector&quot;&gt;.blurred-content&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        ...
        &lt;span class=&quot;token property&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#blur-effect&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s quite common to see this trick in used in the wild for projects like lazy image loader libraries that blur an image while it’s loading. The effect is often achieved is often by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;duplicating an element on-top of the original&lt;/li&gt;
&lt;li&gt;blurring the duplicate&lt;/li&gt;
&lt;li&gt;lowering the opacity of the duplicate&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Generally, this approach works well for static elements whose background and / or image attributes won’t be changing anytime soon. But what about our menu bar?&lt;/p&gt;
&lt;h2&gt;Re-creating &lt;code class=&quot;language-text&quot;&gt;backdrop-filer&lt;/code&gt; effects to achieve blurring&lt;/h2&gt;
&lt;p&gt;A menu bar only blurs what’s scrolled beneath it, making it difficult to know for sure what content will end up needing the effect. What’s more, the content of the page varies unpredictably in size, color, and scale.&lt;/p&gt;
&lt;p&gt;Web-kit browsers solved this problem by introducing the &lt;code class=&quot;language-text&quot;&gt;backdrop-filter&lt;/code&gt; CSS property. It essentially mimics the behavior outlined above, where the entire content of the DOM element’s siblings and children are duplicated and then blurred. FireFox doesn’t support &lt;code class=&quot;language-text&quot;&gt;backdrop-filter&lt;/code&gt; as of right now, and yet, it turns out the approach is very similar.&lt;/p&gt;
&lt;p&gt;To re-create the webkit &lt;code class=&quot;language-text&quot;&gt;backdrop-filter&lt;/code&gt; filter property in FireFox, what we do is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;duplicate the entire site’s content (excluding the menu bar of course)&lt;/li&gt;
&lt;li&gt;blur the container using the svg filter trick outlined above&lt;/li&gt;
&lt;li&gt;place it in a container element and&lt;/li&gt;
&lt;li&gt;put that container inside the navbar’s container.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// select the html element we want to blur&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; blurTarget &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.blur-target&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// duplicate it&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; duplicate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; blurTarget&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;cloneNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// place it inside a container-div&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; targetBlurred &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;div&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// apply blurring svg effect to the container&lt;/span&gt;
    targetBlurred&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;className &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;blurred-content&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// place duplicate inside the container&lt;/span&gt;
    targetBlurred&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;duplicate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    
    &lt;span class=&quot;token comment&quot;&gt;// place our blurred duplicate inside the nav bar&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; navContainer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;.nav-container&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    navContainer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;targetBlurred&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we set the blurred copy’s &lt;code class=&quot;language-text&quot;&gt;z-index&lt;/code&gt; bellow that of the menubar. Note that in order to avoid blurring the contents outside the menu bar, its container needs to have the &lt;code class=&quot;language-text&quot;&gt;overflow: hiddenproperty&lt;/code&gt; set.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;css&quot;&gt;&lt;pre class=&quot;language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;    &lt;span class=&quot;token selector&quot;&gt;// navbar container element
    .nav-container&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; fixed&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 100vw&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;box-shadow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0 1px 0 &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; .1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0 1px 2px &lt;span class=&quot;token function&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; .1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 2&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token property&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; hidden&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    // apply non-web-kit styling if backdrop-filter not supported
    &lt;span class=&quot;token atrule&quot;&gt;&lt;span class=&quot;token rule&quot;&gt;@supports&lt;/span&gt; not &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token property&quot;&gt;backdrop-filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;12px&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        // duplicate&lt;span class=&quot;token selector&quot;&gt;&apos;s container
        .blurred-content&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;0 1rem&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 20px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; absolute&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;&lt;span class=&quot;token function&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;#blur-effect&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 0.3&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 3&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; 50px&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There’s a catch however. The blurred copy of the page doesn’t scroll when the page does out-of-the-box. We have to do some JavaScript trickery to get the blurred copy to scroll at the same speed and maintain the illusion of the transparency effect.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// whenever out page content scrolls, move tbe duplicate&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; contentWrapper &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;#content&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    window&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;scroll&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        duplicate&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;style&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;marginTop &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scrollY &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;px&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;In short, it’s not pretty. In fact it can also significantly reduce the scrolling frame-rates, especially for longer and more complex pages. And, while there are some approaches out there that address this by inserting the blurred duplicate in an &lt;code class=&quot;language-text&quot;&gt;&amp;lt;iframe /&amp;gt;&lt;/code&gt; for instance, the fact is that things shouldn’t be this hard.&lt;/p&gt;
&lt;p&gt;And if you’re thinking, &lt;em&gt;“This sounds like we’ve essentially duplicated the steps outlined in the &lt;code class=&quot;language-text&quot;&gt;backdrop-filter&lt;/code&gt; specs”&lt;/em&gt;, you’re absolutely right. Unlike the spec, however, we can’t &lt;em&gt;“Copy the Backdrop Root Image into a temporary buffer”&lt;/em&gt;. We don’t have access to that buffer, which is why we have to copy the actual HTML DOM elements in full, place them in a container, and then blur them all in unison by blurring the container.&lt;/p&gt;
&lt;p&gt;Thankfully, it looks like most modern browsers are embracing the webkit &lt;code class=&quot;language-text&quot;&gt;backdrop-filter&lt;/code&gt; css property. Chrome starting supporting it since version 81 and FireFox is said to be supporting it within the next major release or two.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Updated on 2020-06-09 | 17:52&lt;/p&gt;
&lt;/blockquote&gt;</content:encoded></item><item><title><![CDATA[About me]]></title><description><![CDATA[Dad 🍼. Pittsburgh sports fanatic 🏴‍☠️. A little about me I love ideating and engineering user experiences. I went into software…]]></description><link>https://gatsby-starter-blog-demo.netlify.app/intro/</link><guid isPermaLink="false">https://gatsby-starter-blog-demo.netlify.app/intro/</guid><pubDate>Sun, 07 Jun 2020 07:00:25 GMT</pubDate><content:encoded>&lt;h2 style=&quot;font-size: 2rem ;border-bottom: none&quot;&gt;Software Engineer&lt;/h2&gt;
&lt;p&gt;Dad 🍼. Pittsburgh sports fanatic 🏴‍☠️.&lt;/p&gt;
&lt;div style=&quot;margin-bottom: 50px&quot;&gt;&lt;/div&gt;
&lt;h2&gt;A little about me&lt;/h2&gt;
&lt;p&gt;I love ideating and engineering user experiences. I went into &lt;strong&gt;software development&lt;/strong&gt; for it’s combination of design thinking and problem solving.&lt;/p&gt;
&lt;p&gt;I’m currently at &lt;a href=&quot;https://www.envizzo.com&quot;&gt;Envizzo&lt;/a&gt;, where I’m responsible for establishing the engineering team’s React development strategies and best practices. Previously I was with the team at &lt;a href=&quot;https://www.adelaidelift.com&quot;&gt;Parsec Media&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I graduated with dual-degree in Technical Writing &amp;#x26; History from &lt;a href=&quot;https://www.cmu.edu/&quot;&gt;Carnegie Mellon University&lt;/a&gt;, after which I worked at an online publisher for 2 years.&lt;/p&gt;</content:encoded></item></channel></rss>