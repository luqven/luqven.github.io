{"version":3,"sources":["webpack:///./src/components/lottie-animation.js","webpack:///./src/pages/blog-index.tsx"],"names":["Icon","render","options","loop","autoplay","animationData","this","props","animationContent","rendererSettings","preserveAspectRatio","height","width","React","Component","pageQuery","BlogIndex","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","map","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","description","excerpt"],"mappings":"0PAGqBA,E,gLACpBC,OAAA,WACC,OACC,kBAAC,IAAD,CAAQC,QAAS,CAChBC,MAAM,EACNC,UAAU,EACVC,cAAeC,KAAKC,MAAMC,iBAC1BC,iBAAkB,CACjBC,oBAAqB,mBAGvBC,OAAQ,IACRC,MAAO,O,GAZwBC,IAAMC,W,YCyE3BC,GAFEC,UAxCG,SAAC,GAAwC,IAAtCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,SACnBC,EAAYF,EAAKG,KAAKC,aAAaC,MACnCC,EAAQN,EAAKO,kBAAkBC,MAErC,OACE,kBAAC,IAAD,CAAQP,SAAUA,EAAUI,MAAOH,GACjC,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,MACA,kBAAC,EAAD,CAAiBd,iBAAkBA,IAClCe,EAAMG,KAAI,YAAc,IAAXC,EAAW,EAAXA,KACNL,EAAQK,EAAKC,YAAYN,OAASK,EAAKE,OAAOC,KACpD,GAAyB,YAArBH,EAAKE,OAAOC,MAAgC,aAAVR,EACtC,OACE,6BAASS,IAAKJ,EAAKE,OAAOC,MACxB,gCACE,wBACEE,MAAO,CACLC,aAAcC,YAAO,EAAI,KAG3B,kBAAC,OAAD,CAAMF,MAAO,CAAEG,UAAW,QAAUC,GAAIT,EAAKE,OAAOC,MACjDR,IAGL,+BAAQK,EAAKC,YAAYS,OAE3B,iCACE,uBACEC,wBAAyB,CACvBC,OAAQZ,EAAKC,YAAYY,aAAeb,EAAKc,kBAatC,e","file":"component---src-pages-blog-index-tsx-2983e4920bcea842338c.js","sourcesContent":["import React from \"react\";\nimport Lottie from \"react-lottie\";\n\nexport default class Icon extends React.Component {\n render() {\n  return (\n   <Lottie options={{\n    loop: true,\n    autoplay: true,\n    animationData: this.props.animationContent,\n    rendererSettings: {\n     preserveAspectRatio: \"xMidYMid slice\"\n    }\n   }}\n   height={250}\n   width={250}\n   />\n  );\n }\n}","// Gatsby supports TypeScript natively!\nimport React from \"react\"\nimport { PageProps, Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm } from \"../utils/typography\"\nimport LottieAnimation from \"../components/lottie-animation\"\nimport animationContent from \"../../content/assets/working-male.json\"\n\ntype Data = {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        excerpt: string\n        frontmatter: {\n          title: string\n          date: string\n          description: string\n        }\n        fields: {\n          slug: string\n        }\n      }\n    }[]\n  }\n}\n\nconst BlogIndex = ({ data, location }: PageProps<Data>) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      <LottieAnimation animationContent={animationContent}/>\n      {posts.map(({ node }) => {\n        const title = node.frontmatter.title || node.fields.slug\n        if (node.fields.slug === \"/intro/\" || title === \"About me\") { return; }\n        return (\n          <article key={node.fields.slug}>\n            <header>\n              <h3\n                style={{\n                  marginBottom: rhythm(1 / 4),\n                }}\n              >\n                <Link style={{ boxShadow: `none` }} to={node.fields.slug}>\n                  {title}\n                </Link>\n              </h3>\n              <small>{node.frontmatter.date}</small>\n            </header>\n            <section>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: node.frontmatter.description || node.excerpt,\n                }}\n              />\n            </section>\n          </article>\n        )\n      })}\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}