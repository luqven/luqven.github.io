{"componentChunkName":"component---src-templates-blog-post-js","path":"/request-animation-frame-versus-request-idle-callback/","result":{"data":{"site":{"siteMetadata":{"title":"Luis Ball"}},"markdownRemark":{"id":"8ae20117-f8b1-5b32-a9b6-0b3c8328836e","excerpt":"You’ll often want to schedule work to happen in response to browser events. For example, imagine every time the user scrolls to the bottom of their feed, the…","html":"<p>You’ll often want to schedule work to happen in response to browser events.</p>\n<p>For example, imagine every time the user scrolls to the bottom of their feed, the site load more posts.</p>\n<blockquote>\n<p>Infinite scrolling example by Corbacho (<a href=\"https://codepen.io/dcorb\">@dcorb</a>)</p>\n</blockquote>\n<iframe height=\"400\" style=\"width: 100%;\" scrolling=\"no\" title=\"Infinite scrolling throttled\" src=\"https://codepen.io/dcorb/embed/preview/eJLMxa?height=400&theme-id=dark&default-tab=result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/eJLMxa'>Infinite scrolling throttled</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>The thing is, if you’re not careful, you can <a href=\"https://johnresig.com/blog/learning-from-twitter/\">harm the responsiveness of your site</a>. And in the ever-evolving world of web-standards, it can be hard to say up to date with best practices.</p>\n<p>Let’s take a look at <strong>what we can do in 2021 to “throttle”, “debounce”, or otherwise limit function calls in response to browser events</strong> and maintain a great user experience (UX).</p>\n<p>Recommended background readings:</p>\n<blockquote>\n<ul>\n<li>Alexander Farkas’ <a href=\"https://stackoverflow.com/a/44779316/11760796\">StackOverflow comment</a></li>\n<li>Nolan Lawson’s <a href=\"https://nolanlawson.com/2018/09/01/a-tour-of-javascript-timers-on-the-web/\">A tour of JavaScript timers on the web</a></li>\n<li>David Corbacho’s <a href=\"https://css-tricks.com/debouncing-throttling-explained-examples/\">Debouncing and Throttling Explained Through Examples</a></li>\n<li>Chris Coyier’s <a href=\"https://css-tricks.com/the-difference-between-throttling-and-debouncing/#throttling-enforces-a-maximum-number-of-times-a-function-can-be-called-over-time-as-in-execute-this-function-at-most-once-every-100-milliseconds\">The Difference Between Throttling and Debouncing</a></li>\n<li>Paul Lewis’s <a href=\"https://developers.google.com/web/updates/2015/08/using-requestidlecallback\">Using requestIdleCallback</a></li>\n<li>Paul Lewis’ <a href=\"https://www.html5rocks.com/en/tutorials/speed/animations/\">Leaner, Meaner, Faster Animations with requestAnimationFrame</a></li>\n</ul>\n</blockquote>\n<h2>What makes webpages feel fast or slow</h2>\n<p>A webpage’s performance in part depends on its ability to maintain 60 frames per second (FPS). A page is rendered one frame at a time. When the FPS reaches 60, the experience on the page is buttery smooth. When it drops bellow 60 FPS, the page will start feel slow.</p>\n<p>By loading all those new posts as the user scrolls, you could overburden the browser’s <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Main_thread\"><strong>main thread</strong></a>. This would limit its ability to maintain rendering at 60FPS and make the page feel unresponsive.</p>\n<p>In other words, if you do too much at once in response to an event you end up with bad UX.</p>\n<h2>Using <code class=\"language-text\">requestAnimationFrame</code> to run callbacks between frame paints</h2>\n<p>Thankfully, there are ways to schedule the work so the main thread <em>doesn’t</em> get overburdened. You can tell the browser its cool to wait until it isn’t so busy before getting back to work.</p>\n<p>Traditionally, this was done with the <code class=\"language-text\">window.requestAnimationFrame(callback)</code>, or <code class=\"language-text\">rAF</code>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame\">method</a>.</p>\n<p>This method tells the browser you want to run a <code class=\"language-text\">callback</code>, cb, function before the start of the next frame’s paint. <code class=\"language-text\">rAF</code> won’t be called more or less times than the browser calculates the layout of the page, or roughly every <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame#notes\">16.667 milliseconds</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">updateFeed</span><span class=\"token punctuation\">(</span>$feed<span class=\"token punctuation\">)</span> <span class=\"token comment\">// cb that perform some DOM modifications</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Generally speaking, it <a href=\"(https://stackoverflow.com/a/44779316/11760796)\">makes sense</a> to throttle most things with <code class=\"language-text\">rAF</code> because you wouldn’t request layout changes from the browser more often than it renders the layout. However, many browser events are already synced to the browser’s rendering of the page, like <code class=\"language-text\">scroll</code>.</p>\n<p>So, instead, <code class=\"language-text\">rAF</code> is used to move layout modification to the end of a frame. This avoid invalidating the DOM layout before you’ve had a chance to finish running all the logic inside the same frame.</p>\n<p><code class=\"language-text\">rAF</code> has some shortcomings however. For starters <code class=\"language-text\">rAF</code> doesn’t know when a user is done interacting with the page.</p>\n<p>So while it’s nice to know your <code class=\"language-text\">callback</code> <em>will</em> get called before every frame repaint, sometimes you want it to wait a little longer. Ideally, you’d <strong>schedule</strong> the <code class=\"language-text\">cb</code> to run when nothing else is happening.</p>\n<h2>Debouncing callbacks for improved performance</h2>\n<p>But just how much performance gain is there <em>really</em> from using a debounce?</p>\n<p>Bellow, you can see David Corbacho neat visual demonstration of the difference between debouncing and not debouncing <code class=\"language-text\">cb</code> calls.</p>\n<blockquote>\n<p>Trailing debounce example by Corbacho (<a href=\"https://codepen.io/dcorb\">@dcorb</a>)</p>\n</blockquote>\n<iframe height=\"400\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce. Trailing\" src=\"https://codepen.io/dcorb/embed/preview/KVxGqN?height=400&theme-id=dark&default-tab=result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/KVxGqN'>Debounce. Trailing</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<p>You’ll not that with the debounce, far fewer <code class=\"language-text\">callback</code> fires happen. In an scenario where you don’t need to react to every single event, this means you’ve saved a ton of computation time!</p>\n<h2>Using <code class=\"language-text\">lodash</code> to <code class=\"language-text\">debounce</code> or <code class=\"language-text\">throttle</code> <code class=\"language-text\">rAF</code></h2>\n<p>Thankfully<code class=\"language-text\">lodash</code>’s <code class=\"language-text\">_.debounce()</code>, which you can use in <a href=\"https://github.com/lodash/lodash/blob/2f79053d7bc7c9c9561a30dda202b3dcd2b72b90/debounce.js\">standalone</a> fashion if you don’t want to add it as a dependency, makes implementing debounces easy.</p>\n<p>The <code class=\"language-text\">_.debounce</code> method <a href=\"https://css-tricks.com/the-difference-between-throttling-and-debouncing/#debouncing-enforces-that-a-function-not-be-called-again-until-a-certain-amount-of-time-has-passed-without-it-being-called-as-in-execute-this-function-only-if-100-milliseconds-have-passed-witho\">“enforces that a function not be called again until a certain amount of time has passed without it being called”</a>.</p>\n<p>So we could do something like making the page wait until 400 milliseconds have gone by between <code class=\"language-text\">updateFeed</code> calls before trying to update the feed.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">updateFeed</span><span class=\"token punctuation\">(</span>$feed<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> waitMs <span class=\"token operator\">=</span> <span class=\"token number\">400</span>\n\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">,</span>\n  _<span class=\"token punctuation\">.</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> waitMs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Using <code class=\"language-text\">requestIdleCallback</code> to run <code class=\"language-text\">cb</code> only when event-loop isn’t busy</h2>\n<p>While the previous performance gains are great, we could ideally leverage all the information the browser has about the event loop. This way, we could implement a solution that doesn’t run a <code class=\"language-text\">cb</code> unless there’s some free computation time.</p>\n<p>This is where the <code class=\"language-text\">window.requestIdleCallback(callback[, options])</code>, or <code class=\"language-text\">rIC</code>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback\">method</a> comes in.</p>\n<p>It runs your <code class=\"language-text\">callback</code> only <em>after</em> the user is done doing stuff.</p>\n<p>To do this ourselves, we’d have to attach an insane amount of event listeners to the DOM telling us what the user is up to and when. Then, when they go quiet, we could try and run our <code class=\"language-text\">cb</code> hoping they’re really done interacting with the page.</p>\n<p><code class=\"language-text\">rIC</code> gives us a foolproof way to run a <code class=\"language-text\">callback</code> only when there’s free time in a frame. Typically, this happens when the user is inactive.</p>\n<p>In our news-feed example, this means that the new posts would only be requested when the user is <em>done</em> scrolling, clicking a button, or otherwise milling about on our page.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateFeed</span><span class=\"token punctuation\">(</span>$feed<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> waitMs <span class=\"token operator\">=</span> <span class=\"token number\">400</span>\n\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">,</span>\n  _<span class=\"token punctuation\">.</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> waitMs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>That’s all well and good, but what if the user is doing a bunch of things on the page immediately after scrolling to the bottom? Won’t the scheduled news-feed update be delayed endlessly?</p>\n<p>That’s where <code class=\"language-text\">rIC</code>’s <code class=\"language-text\">timeout</code> property comes in. You can define a <em>maximum</em> amount of time <code class=\"language-text\">requestIdleCallback</code> can wait before your <code class=\"language-text\">callback</code> is added to the event-loop.</p>\n<p>So in our news-feed example, if we told <code class=\"language-text\">rIC</code> it was only allowed to wait <code class=\"language-text\">{timeout: 2000}</code>, after at most 2 seconds our <code class=\"language-text\">cb</code> would run and feed update would be queued in the event-loop.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateFeed</span><span class=\"token punctuation\">(</span>$feed<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> timeout <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> timeout<span class=\"token operator\">:</span> <span class=\"token number\">2000</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> waitMs <span class=\"token operator\">=</span> <span class=\"token number\">400</span>\n\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">,</span>\n  _<span class=\"token punctuation\">.</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> waitMs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p>You’ll note that even when we use a combination of <code class=\"language-text\">rIC</code> and <code class=\"language-text\">rAF</code>, we <em>still</em> need to debounce and control how often <code class=\"language-text\">rIC</code> can be called to limit the impact on the event-loop.</p>\n</blockquote>\n<h2>Making super-duper sure your callback runs on the first event fire</h2>\n<p>Sometimes you want a <code class=\"language-text\">callback</code> to run on the first event fire. Using the default <code class=\"language-text\">_.debounce</code> behavior, this won’t happen. The <code class=\"language-text\">cb</code> won’t be called until the events have stopped firing.</p>\n<p>To override <code class=\"language-text\">lodash</code>’s default <code class=\"language-text\">_.debounce</code> behavior, you can make use of the optional <code class=\"language-text\">leading</code> flag. This tells <code class=\"language-text\">_.debounce</code> to invoke the <code class=\"language-text\">callback</code> immediately but not invoke it again unless <code class=\"language-text\">waitMs</code> time has gone by.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">update</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">updateFeed</span><span class=\"token punctuation\">(</span>$feed<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">cb</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>update<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">rIC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">requestIdleCallback</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">,</span> timeout<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> timeout <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> timeout<span class=\"token operator\">:</span> <span class=\"token number\">2000</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> waitMs <span class=\"token operator\">=</span> <span class=\"token number\">400</span>\n\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"resize\"</span><span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span>rIc<span class=\"token punctuation\">,</span> waitMs<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> leading<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Again, David Corbacho has an excellent animation illustrating how this works.</p>\n<blockquote>\n<p>Trailing debounce example by Corbacho (<a href=\"https://codepen.io/dcorb\">@dcorb</a>)</p>\n</blockquote>\n<iframe height=\"400\" style=\"width: 100%;\" scrolling=\"no\" title=\"Debounce. Leading\" src=\"https://codepen.io/dcorb/embed/preview/GZWqNV?height=400&theme-id=dark&default-tab=result\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n  See the Pen <a href='https://codepen.io/dcorb/pen/GZWqNV'>Debounce. Leading</a> by Corbacho\n  (<a href='https://codepen.io/dcorb'>@dcorb</a>) on <a href='https://codepen.io'>CodePen</a>.\n</iframe>\n<h2>Debounce wisely</h2>\n<p>Using <code class=\"language-text\">rAF</code> and <code class=\"language-text\">rIC</code> in combination with <code class=\"language-text\">_.debounce</code> is a great way to run logic in response to browser events without harming UX. But it doesn’t come without pitfalls.</p>\n<p>For example, <code class=\"language-text\">rIC</code> calls are not an ideal place to preform DOM modifications, since the DOM reference at invocation could already have been invalidated. Moreover, <code class=\"language-text\">rIC</code> support in even modern browsers <a href=\"https://caniuse.com/requestidlecallback\">varies significantly</a>, where even Chrome doesn’t quite behave the way you’d expect.</p>\n<p>But for a good amount of use cases out there (infinity-scrolling, update-on-resize, parallax, etc) this combination can and should be used.</p>","frontmatter":{"title":"Best practices for requestIdleCallback and requestAnimationFrame in 2021","date":"May 13, 2021","description":"How to make the most of these essential browser APIs"}}},"pageContext":{"slug":"/request-animation-frame-versus-request-idle-callback/","previous":{"fields":{"slug":"/wsl2-is-a-memory-hog/"},"frontmatter":{"title":"WSL2 is a memory hog and how to fix it."}},"next":null}}}