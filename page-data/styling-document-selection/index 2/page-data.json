{"componentChunkName":"component---src-templates-blog-post-js","path":"/styling-document-selection/index 2/","result":{"data":{"site":{"siteMetadata":{"title":"Luis Ball"}},"markdownRemark":{"id":"26ae7994-d1f8-5d1b-93f3-d9ac673146a8","excerpt":"I’ve always wanted to implement something like Medium’s highlighting and sharing tooltip. But I was surprised just how much work it takes to do it right…","html":"<p>I’ve always wanted to implement something like <strong>Medium’s</strong> highlighting and sharing tooltip. But I was surprised just how much work it takes to do it right, especially in SSR React applications. So in the next few blog posts I’ll be detailing some tips and tricks I used to create a medium-like sharing tooltip.</p>\n<h2>Getting the selected text from the document</h2>\n<p>First off, you’re going to want an easy way to reference the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Selection\">Selection object</a>. This is the object that stores “the range of text selected by the user or the current position of the caret.” Specifically, we’re going to want <code class=\"language-text\">Selection.toString()</code> since that’s what returns the selected text we’d like to share with our peeps. Since we’re working with an SSR React application however, the <code class=\"language-text\">document</code> isn’t going to be available just anywhere. Moreover, we probably want keep this separate from the components that use the selected text. Which is to say, what we want is a Hook.</p>\n<h3>useSelection Hook</h3>\n<p>So let’s make a React hook that returns selected text and Selection object. First we’re going to want to import <code class=\"language-text\">useState</code> and <code class=\"language-text\">useEffect</code> from React. We are making a hook after all. But note that in SSR React apps, the <code class=\"language-text\">window</code> and <code class=\"language-text\">document</code> are only accessible within specific react-lifecycle methods. We’re going to access them in the <code class=\"language-text\">useEffect</code> hook and store the values we draw from them using the <code class=\"language-text\">useState</code> hook. In this case, that means storing our selected text:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selected<span class=\"token punctuation\">,</span> setSelected<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> selObj <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">setSelected</span><span class=\"token punctuation\">(</span>selObj<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now if all we wanted was a one time snapshot of the <code class=\"language-text\">Selection</code> object, we’d be set. But what we really want is the <em>current</em> value of the <code class=\"language-text\">Selection</code>. In other words, whenever the selection changes, our <code class=\"language-text\">Selection</code> object should have changed as well. To get this behavior, we’re going to use the <code class=\"language-text\">onselectionchange</code> <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document/selectionchange_event\">event listener</a>. This way, we retrieve the <code class=\"language-text\">selection.toString()</code> and set it as <code class=\"language-text\">selected</code> using the <code class=\"language-text\">setSelected()</code> state hook.</p>\n<p>Our final product for a <code class=\"language-text\">useSelection</code> hook then looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useSelection</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>selected<span class=\"token punctuation\">,</span> setSelected<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// whenever the selection changes</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onselectionchange</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> selection<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// get the selection object and text</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>getSelection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                selection <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                text <span class=\"token operator\">=</span> selection<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                selection <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>selection<span class=\"token punctuation\">.</span><span class=\"token function\">createRange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                text <span class=\"token operator\">=</span> selection<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// update state with the object and the text</span>\n            <span class=\"token function\">setSelected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">,</span> selection <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> selected<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now that we have the hook, we can use it in any component to get the <code class=\"language-text\">Selection</code> object and its string value.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> selected <span class=\"token operator\">=</span> <span class=\"token function\">useSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// => { selection: Selection, text: selected text str }</span></code></pre></div>\n<h2>Up next</h2>\n<p>In the next post in the series, I’ll detail how we can use this hook to share the selected text using a share-tooltip.</p>\n<!-- TODO: add this to final blog post -->\n<!-- It's easy to fall in love with [Medium's](www.medium.com) reading experience. They do some incredibly smart text formatting and styling that makes the article easy to read at any screen resolution and size. It's a shame most people don't realize the amount of effort that goes into it. Especially since to really get a feel for it you'd have to open up the inspector and take a peek at plethora of custom CSS being used on sometimes even the character level. -->","frontmatter":{"title":"How to style the range of text selected by the user and other Selection object tricks","date":"July 01, 2020","description":"Part I: creating a useSelection hook that stores the currently selected text"}}},"pageContext":{"slug":"/styling-document-selection/index 2/","previous":{"fields":{"slug":"/why-bulk-twitter-unlike-is-so-hard/"},"frontmatter":{"title":"Bulk un-liking tweets, why it's so hard, and how to do it"}},"next":{"fields":{"slug":"/styling-document-selection/"},"frontmatter":{"title":"Browser Selection API tricks"}}}}}