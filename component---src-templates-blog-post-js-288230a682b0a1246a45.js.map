{"version":3,"sources":["webpack:///./src/components/share-tooltip/tooltip-helpers.js","webpack:///./src/components/share-tooltip/share-tooltip.js","webpack:///./src/utils/useSelection.js","webpack:///./src/templates/blog-post.js"],"names":["PAGE_URL","window","location","href","createShareLink","type","title","description","text","TooltipContainer","styled","div","LinksContainer","props","top","left","RotatedSquare","ShareTooltip","postTitle","postDescription","position","document","documentElement","scrollTop","body","querySelector","selected","useState","setSelected","onselectionchange","selection","getSelection","toString","createRange","useSelection","setLocation","useEffect","length","rect","getRangeAt","getBoundingClientRect","width","shareLink","e","preventDefault","url","currentTarget","open","className","onClick","style","marginTop","color","aria-label","role","pageQuery","BlogPostTemplate","data","pageContext","post","markdownRemark","siteTitle","site","siteMetadata","previous","next","frontmatter","excerpt","rhythm","marginBottom","scale","display","date","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel"],"mappings":"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","file":"component---src-templates-blog-post-js-288230a682b0a1246a45.js","sourcesContent":["/*!\n* license: MIT\n* Heavily inspired by, Share Selected Text\n* url: https://github.com/VincentLoy/share-selected-text\n* author: Vincent Loy <vincent.loy1@gmail.com>\n* adapted for personal use by: Luis H. Ball Jr. <luisball@hey.com>\n*/\n\nimport styled from 'styled-components'\n\n// constants\nconst PAGE_URL = window.location.href;\n// const LIGHT_BLUE = '#6CB4EE'\n// const CYAN = '#00FFFF';\nconst DALLAS_BLUE = '#041E42';\nconst DALLAS_BLUE_TRANSPARENT = '#041e4254';\n\n// helpers\n// accepts string designating link type, returns link url\nexport const createShareLink = (type, title, description, text) => {\n    if (!text) { return '' }\n\n    const twitterUrl = `https://twitter.com/intent/tweet?url=${PAGE_URL}&text=${description}:%0\"${text}\"&via=@luishbjr1`;\n    const emailUrl = `mailto:name@email.com?subject=${title}&body=\"${text}\"%0D%0A...%0D%0A${description}, ${PAGE_URL}`;\n    const shareUrl =  type === 'twitter' ? twitterUrl : emailUrl;\n\n    return shareUrl;\n};\n\n// styled components\nexport const TooltipContainer = styled.div`\n    position: absolute;\n    top: 0px;\n    left: 0px;\n`;\n\nexport const LinksContainer = styled.div`\n    top: ${props => props.location.top + 'px'};\n    left: ${props => props.location.left + 'px'};\n    position: relative;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-evenly;\n    align-items: center;\n    width: 120px;\n    height: 35px;\n    background-color: ${DALLAS_BLUE};\n    box-shadow: -1px 1px 4px 1px ${DALLAS_BLUE_TRANSPARENT};\n    border-radius: 4px;\n    padding-left: 5px;\n    padding-right: 5px;\n`\n\nexport const RotatedSquare = styled.div`\n    background: ${DALLAS_BLUE};\n    transform: rotate(45deg);\n    width: 25px;\n    height: 25px;\n    position: absolute;\n    top: ${props => props.location.top + 15 + 'px'};\n    left: ${props => props.location.left + 50 + 'px'};\n`\n","/*!\n* ShareTooltip Component\n* license: MIT\n* author: Luis H. Ball Jr. <luisball@hey.com>\n* heavily inspired by: Share Selected Text, url: https://github.com/VincentLoy/share-selected-text\n*/\n\nimport React, { useState, useEffect } from 'react'\n\nimport { useSelection } from \"../../utils/useSelection\"\nimport {\n    createShareLink,\n    TooltipContainer,\n    LinksContainer,\n    RotatedSquare } from \"./tooltip-helpers\"\n\n// constants\nconst TOOLTIP_HEIGHT = 35;\nconst FACTOR = 1.33;\n\nconst ShareTooltip = ({ postTitle, postDescription }) => {\n    const position = document.documentElement.scrollTop || document.body.scrollTop;\n    const body = document.querySelector('body');\n    const selected = useSelection();\n    const [location, setLocation] = useState({top: '', left: ''})\n\n    // whenever selection changes calculate new top & left offsets\n    useEffect(() => {\n        if (selected && selected.text.length) {\n            let range = selected.selection.getRangeAt(0);\n            let rect = range.getBoundingClientRect();\n            setLocation({\n                top: position + rect.top - TOOLTIP_HEIGHT * FACTOR,\n                left: rect.left + rect.width / 2 - body.getBoundingClientRect().width / 12,\n            })\n        } else {\n            // if no current selection do not update location\n            return;\n        }\n    }, [body, position, selected])\n\n    // if no current selection render nothing\n    if (!selected || !selected.text || !selected.text.length || selected.text.length < 1) {\n        return null;\n    }\n\n    // open share window on icon click\n    const shareLink = (e) => {\n        e.preventDefault();\n        const windowFeatures = 'status=no,menubar=no,location=no,scrollbars=no,width=720,height=540';\n        const url = e.currentTarget.href;\n        window.open(url, 'Share this post', windowFeatures);\n    }\n\n    return (\n        <TooltipContainer className={`share-tooltip-container ${selected ? '' : 'hidden'}`}>\n            <RotatedSquare location={location}/>\n            <LinksContainer location={location}>\n                <a href={createShareLink('twitter', postTitle, postDescription, selected.text)} onClick={(e) => shareLink(e)}>\n                    <p style={{ marginTop: 10, color: 'white' }}>\n                        <span className=\"emoji\" aria-label=\"twitter\" role=\"img\">üê¶</span>\n                    </p>\n                </a>\n                <a href={createShareLink('email', postTitle, postDescription, selected.text)} onClick={(e) => shareLink(e)}>\n                    <p style={{ marginTop: 10, color: 'white' }}>\n                        <span className=\"emoji\" aria-label=\"email\" role=\"img\">‚úâÔ∏è</span>\n                    </p>\n                </a>\n            </LinksContainer>\n        </TooltipContainer>\n    )\n}\n\nexport default ShareTooltip\n","/**\n * license: MIT\n * author: Luis H. Ball Jr. <luisball@hey.com>\n * \n * React hook that returns selected text and Selection object.\n * Note: the selection object does not log but is present.\n * \n * For more on how this works, read the Window.getSelection() documentation:\n * https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection\n */\n\nimport { useState } from 'react';\n\nexport const useSelection = () => {\n    const [selected, setSelected] = useState()\n\n    document.onselectionchange = () => {\n        let selection;\n        let text = '';\n\n        if (document.getSelection) {\n            selection = document.getSelection();\n            text = selection.toString();\n        } else if (document.selection && document.selection.type !== 'Control') {\n            selection = document.selection.createRange();\n            text = selection.text;\n        }\n        setSelected({text, selection})\n    };\n    return selected;\n}","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport { rhythm, scale } from \"../utils/typography\"\nimport ShareTooltip from \"../components/share-tooltip/share-tooltip\";\n\nimport './blog-post.css'\n\nconst BlogPostTemplate = ({ data, pageContext, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n  const { previous, next } = pageContext\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article>\n        <header>\n          <h1\n            style={{\n              marginTop: rhythm(1),\n              marginBottom: 0,\n            }}\n          >\n            {post.frontmatter.title}\n          </h1>\n          {/* <p>{JSON.stringify(selected)}</p> */}\n          <ShareTooltip postTitle={post.frontmatter.title} postDescription={post.frontmatter.description || post.excerpt}/>\n          <p\n            style={{\n              ...scale(-1 / 5),\n              display: `block`,\n              marginBottom: rhythm(1),\n            }}\n          >\n            {post.frontmatter.date}\n          </p>\n        </header>\n        <section dangerouslySetInnerHTML={{ __html: post.html }} />\n        <hr\n          style={{\n            marginBottom: rhythm(1),\n          }}\n        />\n        <footer>\n          <Bio />\n        </footer>\n      </article>\n\n      <nav>\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ‚Üê {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} ‚Üí\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n  }\n`\n"],"sourceRoot":""}